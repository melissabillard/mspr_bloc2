name: React CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Tests Unitaires
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: 📦 Installation des dépendances
        run: npm ci

      - name: 🧪 Lancer les tests unitaires
        run: npm run test:unit
        env:
          CI: true

      - name: 📊 Tests avec couverture de code
        run: npm run test:coverage
        env:
          CI: true

      - name: 📈 Upload coverage to Codecov (optionnel)
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build React App
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: 📦 Installation des dépendances
        run: npm ci

      - name: 🏗️ Build de l'application
        run: npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: build/
          retention-days: 30

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 📤 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: build/

      - name: 🚀 Deploy (placeholder)
        run: |
          echo "🚀 Déploiement en cours..."
          echo "Build files disponibles dans ./build/"
          # Ici tu peux ajouter tes commandes de déploiement

      - name: 📢 Notification Discord - Succès
        if: success() && secrets.DISCORD_WEBHOOK_URL_RELEASE != ''
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL_RELEASE }}
        run: |
          VERSION=$(date +"%Y.%m.%d")-$(git rev-parse --short HEAD)
          curl -X POST -H "Content-Type: application/json" -d '{
            "content": "**✅ Déploiement React Réussi - COFRAP FRONT**\n\n**Version:** '"${VERSION}"'\n**Repository:** ${{ github.repository }}\n**Tests:** ✅ Passés\n**Build:** ✅ Réussi\n**Deploy:** ✅ Terminé\n**Commit:** ${{ github.event.head_commit.message }}"
          }' $DISCORD_WEBHOOK_URL

      - name: 📢 Notification Discord - Échec
        if: failure() && secrets.DISCORD_WEBHOOK_URL != ''
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{
            "content": "**❌ Échec Pipeline React - COFRAP FRONT**\n\n**Repository:** ${{ github.repository }}\n**Commit:** ${{ github.event.head_commit.message }}\n**Étape échouée:** ${{ github.job }}\n**Logs:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }' $DISCORD_WEBHOOK_URL
